configurations {
    mavenEmbedder
}

dependencies {
    compile "org.apache.maven:maven-plugin-api:3.5.0"
    compile 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.5'
    compile project(":codegen")

    mavenEmbedder 'org.apache.maven:maven-embedder:3.5.0'
    mavenEmbedder 'org.slf4j:slf4j-simple:1.7.5'
    mavenEmbedder 'org.eclipse.aether:aether-connector-basic:1.0.2.v20150114'
    mavenEmbedder 'org.eclipse.aether:aether-transport-wagon:1.0.2.v20150114'
    mavenEmbedder 'org.apache.maven.wagon:wagon-http:2.9:shaded'
    mavenEmbedder 'org.apache.maven.wagon:wagon-provider-api:2.9'
}

install.repositories.mavenInstaller.pom.with {
    groupId = project.group
    artifactId = project.name
    version = project.version
    packaging = 'maven-plugin'
}

task generatePluginDescriptor(type: JavaExec, dependsOn: compileJava) {
    def pomFile = file("$buildDir/pom.xml")
    def pluginDescriptorFile = new File(project.compileKotlin.destinationDir, 'META-INF/maven/plugin.xml')
    def directory = buildDir.canonicalPath
    def outputDirectory = compileKotlin.destinationDir.canonicalPath

    // FIXME: this does not seem to be working
    inputs.files project.compileKotlin.outputs.files
    outputs.file pluginDescriptorFile

    classpath = configurations.mavenEmbedder
    println(classpath)
    println(inputs.files)
    main = 'org.apache.maven.cli.MavenCli'
    systemProperties['maven.multiModuleProjectDirectory'] = projectDir
    args = [
            '--errors',
            '--batch-mode',
//            '--settings', '../config/repo-settings.xml',
            '--file', "${buildDir}/pom.xml",
            'org.apache.maven.plugins:maven-plugin-plugin:3.5:descriptor'
    ]

    doFirst {
        // we have to do it in this cryptic way, instead of
        // ```
        // project {
        //     build {
        //        directory = directory
        //        outputDirectory = outputDirectory
        //     }
        // }
        // because MavenModel already defines build and so it will
        // result in No such property: _SCRIPT_CLASS_NAME_ for class: org.apache.maven.model.Model
        install.repositories
                .mavenInstaller
                .pom
                .withXml {
            asNode().appendNode('build')
                    .with {
                appendNode('directory', directory)
                appendNode('outputDirectory', outputDirectory)
            }
        }
        .writeTo(pomFile)

        assert pomFile.file, "${pomFile.canonicalPath}: was not generated"
        logger.info("POM is generated in ${pomFile.canonicalPath}")
    }

    doLast {
        assert pluginDescriptorFile.file, "${pluginDescriptorFile.canonicalPath}: was not generated"
        logger.info("Plugin descriptor is generated in ${pluginDescriptorFile.canonicalPath}")
    }
}
project.generatePluginDescriptor.dependsOn(compileKotlin)
project.jar.dependsOn(generatePluginDescriptor)
